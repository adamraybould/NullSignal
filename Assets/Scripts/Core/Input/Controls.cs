//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Core/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerCharacter"",
            ""id"": ""58816fb3-d840-43da-a0c8-50ff0e06196a"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b8929f86-d315-4c2e-8fcc-736633dc99f2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""1132d8e8-e229-4a33-a19b-6d5fbfc313a7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""da2583da-2c4f-4d8b-a8f1-7b3e5b25dbd0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""30096a54-5981-4ede-a7c9-09827ad33b57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""9ddfad11-6358-4e0c-aef1-bd6eeb6b4ab9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""17a9ba2f-f75b-4aaf-8423-de6a19f965f8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""19f8adef-3f6a-4708-ad5a-38f7b1fbe5d2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0e6da697-d687-44b3-9dc0-3312c0ad4d70"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""afc25d37-9363-419f-83f9-a7fecfd258b7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b38d81a2-fab8-4731-9aa9-aaa920a3767c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""70da4a75-4d2b-408e-8357-8b7fea17f586"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d935fa8-a2e9-46b7-b579-ed8796ea8ad6"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0515ae1-e04f-4e99-b404-b7ac81d344cb"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=15,y=15)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""658632db-2457-4f61-b6ee-d990d3823527"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a504d5dc-5032-4333-9750-19cffa696ed6"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerInteraction"",
            ""id"": ""d0bb9138-7b6a-4f9d-93d6-baa6a3c45ce8"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""81981b9b-2e35-4cde-bcef-2e24951f2a9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitFocus"",
                    ""type"": ""Button"",
                    ""id"": ""e844315c-7e52-4994-8b16-2b148d07faed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""98370a5b-509e-4d47-85af-d323766f59f2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""013ff68b-89b3-4a7d-86bc-4d1516906c75"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitFocus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Radar"",
            ""id"": ""122a9662-44e7-4821-95d3-731dbe7d850e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""00c43e5e-c2ca-4083-8ee7-abeb3661a313"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scan"",
                    ""type"": ""Button"",
                    ""id"": ""7f3245f5-cb85-44a1-a1ba-94844978d5a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""aa2317e5-c922-43d4-9799-c3a7d4bc8f1d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fb3d4756-d9d5-4fed-b4de-80850b142b9e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""60fa6b04-4a12-4358-bbe6-ef5aa001b4e6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""750a9c5f-1773-4fc1-bf27-cec547ae1c7b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3fa99280-128e-48e4-baa6-7dc0bf571bd1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fe7af1bf-4362-42cd-8716-e5965aa23565"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HologramTable"",
            ""id"": ""0392379d-43d1-4648-8f97-2ebf05fb5efa"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""86e49d8a-f9fa-4e13-8098-4c38be54469b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""e9cbd3e6-050a-4419-a884-673f5274a796"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d22b4350-5c2c-4c7a-a6c7-1aff2fa1c471"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42e5cc0c-420e-4195-aa77-54399db0ba9b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GalaxyMap"",
            ""id"": ""521b5c8e-a6dd-4045-bba0-f5cde83f129e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""5c0e104d-67e5-4d11-8e94-c8281843692a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""627b297d-b38a-43a0-87b4-c5c4d239cd32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""1a8a11d2-5ba7-431f-b4d1-4caa3b2653a9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""8e56df1a-9a7b-4827-b086-d43437ebaeff"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pulse"",
                    ""type"": ""Button"",
                    ""id"": ""2d9f6569-2df8-409e-ab3f-0f29ce9791c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""64390a1f-72de-4ed6-b441-d317d369bd6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""1f05ebac-5472-47b6-b57d-1fc8bc3772d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1759d92f-082e-4218-99b0-e03147d148a8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""015f60af-215f-42da-b627-e545400ecf62"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""d16f1812-7d56-4898-88f9-2acf4a1ff60f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a5fcf5e8-2a9b-4e94-967e-1e58c1fcb7b4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7cc0dc87-b135-4ee5-b62b-31234471ca1b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b2349a80-3614-43b1-a8fd-afac67fd73a5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f16c3c07-cd77-4497-b019-431b91fc6913"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4a3fa7c0-8c66-4b33-b8fa-80c15e8e480e"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f073053-1f38-4d86-9185-699c805dd6a0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pulse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""835d9c19-293d-4285-85a4-0777de40d9b4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4566eb1c-06f3-42fe-b6aa-0645d53e3d03"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SystemMap"",
            ""id"": ""4a95aeb1-bfff-46d7-aa86-3d77da4ecd63"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""a11a24ec-3cb4-4b52-9143-cfd020dc14ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""e85509f6-9078-4449-94be-d6ebfbc2d22b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f6b00c7-96d0-417a-9a21-30570d5a238e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb1ac53f-8afb-44c8-bd1d-8cefdf3f8e7a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerCharacter
        m_PlayerCharacter = asset.FindActionMap("PlayerCharacter", throwIfNotFound: true);
        m_PlayerCharacter_Movement = m_PlayerCharacter.FindAction("Movement", throwIfNotFound: true);
        m_PlayerCharacter_Look = m_PlayerCharacter.FindAction("Look", throwIfNotFound: true);
        m_PlayerCharacter_Jump = m_PlayerCharacter.FindAction("Jump", throwIfNotFound: true);
        m_PlayerCharacter_Sprint = m_PlayerCharacter.FindAction("Sprint", throwIfNotFound: true);
        m_PlayerCharacter_Crouch = m_PlayerCharacter.FindAction("Crouch", throwIfNotFound: true);
        // PlayerInteraction
        m_PlayerInteraction = asset.FindActionMap("PlayerInteraction", throwIfNotFound: true);
        m_PlayerInteraction_Interact = m_PlayerInteraction.FindAction("Interact", throwIfNotFound: true);
        m_PlayerInteraction_ExitFocus = m_PlayerInteraction.FindAction("ExitFocus", throwIfNotFound: true);
        // Radar
        m_Radar = asset.FindActionMap("Radar", throwIfNotFound: true);
        m_Radar_Movement = m_Radar.FindAction("Movement", throwIfNotFound: true);
        m_Radar_Scan = m_Radar.FindAction("Scan", throwIfNotFound: true);
        // HologramTable
        m_HologramTable = asset.FindActionMap("HologramTable", throwIfNotFound: true);
        m_HologramTable_Select = m_HologramTable.FindAction("Select", throwIfNotFound: true);
        m_HologramTable_Back = m_HologramTable.FindAction("Back", throwIfNotFound: true);
        // GalaxyMap
        m_GalaxyMap = asset.FindActionMap("GalaxyMap", throwIfNotFound: true);
        m_GalaxyMap_Movement = m_GalaxyMap.FindAction("Movement", throwIfNotFound: true);
        m_GalaxyMap_Rotate = m_GalaxyMap.FindAction("Rotate", throwIfNotFound: true);
        m_GalaxyMap_Zoom = m_GalaxyMap.FindAction("Zoom", throwIfNotFound: true);
        m_GalaxyMap_MouseDelta = m_GalaxyMap.FindAction("MouseDelta", throwIfNotFound: true);
        m_GalaxyMap_Pulse = m_GalaxyMap.FindAction("Pulse", throwIfNotFound: true);
        m_GalaxyMap_Select = m_GalaxyMap.FindAction("Select", throwIfNotFound: true);
        m_GalaxyMap_Back = m_GalaxyMap.FindAction("Back", throwIfNotFound: true);
        // SystemMap
        m_SystemMap = asset.FindActionMap("SystemMap", throwIfNotFound: true);
        m_SystemMap_Select = m_SystemMap.FindAction("Select", throwIfNotFound: true);
        m_SystemMap_Back = m_SystemMap.FindAction("Back", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerCharacter
    private readonly InputActionMap m_PlayerCharacter;
    private List<IPlayerCharacterActions> m_PlayerCharacterActionsCallbackInterfaces = new List<IPlayerCharacterActions>();
    private readonly InputAction m_PlayerCharacter_Movement;
    private readonly InputAction m_PlayerCharacter_Look;
    private readonly InputAction m_PlayerCharacter_Jump;
    private readonly InputAction m_PlayerCharacter_Sprint;
    private readonly InputAction m_PlayerCharacter_Crouch;
    public struct PlayerCharacterActions
    {
        private @Controls m_Wrapper;
        public PlayerCharacterActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerCharacter_Movement;
        public InputAction @Look => m_Wrapper.m_PlayerCharacter_Look;
        public InputAction @Jump => m_Wrapper.m_PlayerCharacter_Jump;
        public InputAction @Sprint => m_Wrapper.m_PlayerCharacter_Sprint;
        public InputAction @Crouch => m_Wrapper.m_PlayerCharacter_Crouch;
        public InputActionMap Get() { return m_Wrapper.m_PlayerCharacter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerCharacterActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerCharacterActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerCharacterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerCharacterActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
        }

        private void UnregisterCallbacks(IPlayerCharacterActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
        }

        public void RemoveCallbacks(IPlayerCharacterActions instance)
        {
            if (m_Wrapper.m_PlayerCharacterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerCharacterActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerCharacterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerCharacterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerCharacterActions @PlayerCharacter => new PlayerCharacterActions(this);

    // PlayerInteraction
    private readonly InputActionMap m_PlayerInteraction;
    private List<IPlayerInteractionActions> m_PlayerInteractionActionsCallbackInterfaces = new List<IPlayerInteractionActions>();
    private readonly InputAction m_PlayerInteraction_Interact;
    private readonly InputAction m_PlayerInteraction_ExitFocus;
    public struct PlayerInteractionActions
    {
        private @Controls m_Wrapper;
        public PlayerInteractionActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_PlayerInteraction_Interact;
        public InputAction @ExitFocus => m_Wrapper.m_PlayerInteraction_ExitFocus;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInteractionActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInteractionActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @ExitFocus.started += instance.OnExitFocus;
            @ExitFocus.performed += instance.OnExitFocus;
            @ExitFocus.canceled += instance.OnExitFocus;
        }

        private void UnregisterCallbacks(IPlayerInteractionActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @ExitFocus.started -= instance.OnExitFocus;
            @ExitFocus.performed -= instance.OnExitFocus;
            @ExitFocus.canceled -= instance.OnExitFocus;
        }

        public void RemoveCallbacks(IPlayerInteractionActions instance)
        {
            if (m_Wrapper.m_PlayerInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInteractionActions @PlayerInteraction => new PlayerInteractionActions(this);

    // Radar
    private readonly InputActionMap m_Radar;
    private List<IRadarActions> m_RadarActionsCallbackInterfaces = new List<IRadarActions>();
    private readonly InputAction m_Radar_Movement;
    private readonly InputAction m_Radar_Scan;
    public struct RadarActions
    {
        private @Controls m_Wrapper;
        public RadarActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Radar_Movement;
        public InputAction @Scan => m_Wrapper.m_Radar_Scan;
        public InputActionMap Get() { return m_Wrapper.m_Radar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RadarActions set) { return set.Get(); }
        public void AddCallbacks(IRadarActions instance)
        {
            if (instance == null || m_Wrapper.m_RadarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RadarActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Scan.started += instance.OnScan;
            @Scan.performed += instance.OnScan;
            @Scan.canceled += instance.OnScan;
        }

        private void UnregisterCallbacks(IRadarActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Scan.started -= instance.OnScan;
            @Scan.performed -= instance.OnScan;
            @Scan.canceled -= instance.OnScan;
        }

        public void RemoveCallbacks(IRadarActions instance)
        {
            if (m_Wrapper.m_RadarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRadarActions instance)
        {
            foreach (var item in m_Wrapper.m_RadarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RadarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RadarActions @Radar => new RadarActions(this);

    // HologramTable
    private readonly InputActionMap m_HologramTable;
    private List<IHologramTableActions> m_HologramTableActionsCallbackInterfaces = new List<IHologramTableActions>();
    private readonly InputAction m_HologramTable_Select;
    private readonly InputAction m_HologramTable_Back;
    public struct HologramTableActions
    {
        private @Controls m_Wrapper;
        public HologramTableActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_HologramTable_Select;
        public InputAction @Back => m_Wrapper.m_HologramTable_Back;
        public InputActionMap Get() { return m_Wrapper.m_HologramTable; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HologramTableActions set) { return set.Get(); }
        public void AddCallbacks(IHologramTableActions instance)
        {
            if (instance == null || m_Wrapper.m_HologramTableActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HologramTableActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        private void UnregisterCallbacks(IHologramTableActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        public void RemoveCallbacks(IHologramTableActions instance)
        {
            if (m_Wrapper.m_HologramTableActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHologramTableActions instance)
        {
            foreach (var item in m_Wrapper.m_HologramTableActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HologramTableActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HologramTableActions @HologramTable => new HologramTableActions(this);

    // GalaxyMap
    private readonly InputActionMap m_GalaxyMap;
    private List<IGalaxyMapActions> m_GalaxyMapActionsCallbackInterfaces = new List<IGalaxyMapActions>();
    private readonly InputAction m_GalaxyMap_Movement;
    private readonly InputAction m_GalaxyMap_Rotate;
    private readonly InputAction m_GalaxyMap_Zoom;
    private readonly InputAction m_GalaxyMap_MouseDelta;
    private readonly InputAction m_GalaxyMap_Pulse;
    private readonly InputAction m_GalaxyMap_Select;
    private readonly InputAction m_GalaxyMap_Back;
    public struct GalaxyMapActions
    {
        private @Controls m_Wrapper;
        public GalaxyMapActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_GalaxyMap_Movement;
        public InputAction @Rotate => m_Wrapper.m_GalaxyMap_Rotate;
        public InputAction @Zoom => m_Wrapper.m_GalaxyMap_Zoom;
        public InputAction @MouseDelta => m_Wrapper.m_GalaxyMap_MouseDelta;
        public InputAction @Pulse => m_Wrapper.m_GalaxyMap_Pulse;
        public InputAction @Select => m_Wrapper.m_GalaxyMap_Select;
        public InputAction @Back => m_Wrapper.m_GalaxyMap_Back;
        public InputActionMap Get() { return m_Wrapper.m_GalaxyMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GalaxyMapActions set) { return set.Get(); }
        public void AddCallbacks(IGalaxyMapActions instance)
        {
            if (instance == null || m_Wrapper.m_GalaxyMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GalaxyMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @MouseDelta.started += instance.OnMouseDelta;
            @MouseDelta.performed += instance.OnMouseDelta;
            @MouseDelta.canceled += instance.OnMouseDelta;
            @Pulse.started += instance.OnPulse;
            @Pulse.performed += instance.OnPulse;
            @Pulse.canceled += instance.OnPulse;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        private void UnregisterCallbacks(IGalaxyMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @MouseDelta.started -= instance.OnMouseDelta;
            @MouseDelta.performed -= instance.OnMouseDelta;
            @MouseDelta.canceled -= instance.OnMouseDelta;
            @Pulse.started -= instance.OnPulse;
            @Pulse.performed -= instance.OnPulse;
            @Pulse.canceled -= instance.OnPulse;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        public void RemoveCallbacks(IGalaxyMapActions instance)
        {
            if (m_Wrapper.m_GalaxyMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGalaxyMapActions instance)
        {
            foreach (var item in m_Wrapper.m_GalaxyMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GalaxyMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GalaxyMapActions @GalaxyMap => new GalaxyMapActions(this);

    // SystemMap
    private readonly InputActionMap m_SystemMap;
    private List<ISystemMapActions> m_SystemMapActionsCallbackInterfaces = new List<ISystemMapActions>();
    private readonly InputAction m_SystemMap_Select;
    private readonly InputAction m_SystemMap_Back;
    public struct SystemMapActions
    {
        private @Controls m_Wrapper;
        public SystemMapActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_SystemMap_Select;
        public InputAction @Back => m_Wrapper.m_SystemMap_Back;
        public InputActionMap Get() { return m_Wrapper.m_SystemMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SystemMapActions set) { return set.Get(); }
        public void AddCallbacks(ISystemMapActions instance)
        {
            if (instance == null || m_Wrapper.m_SystemMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SystemMapActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        private void UnregisterCallbacks(ISystemMapActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        public void RemoveCallbacks(ISystemMapActions instance)
        {
            if (m_Wrapper.m_SystemMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISystemMapActions instance)
        {
            foreach (var item in m_Wrapper.m_SystemMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SystemMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SystemMapActions @SystemMap => new SystemMapActions(this);
    public interface IPlayerCharacterActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
    }
    public interface IPlayerInteractionActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnExitFocus(InputAction.CallbackContext context);
    }
    public interface IRadarActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnScan(InputAction.CallbackContext context);
    }
    public interface IHologramTableActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
    public interface IGalaxyMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnPulse(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
    public interface ISystemMapActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
}
